AWSTemplateFormatVersion: '2010-09-09'
Description: Email Spam Detector

Parameters:
  EmailBucketName:
    Type: String
    Default: hlin-email-storage-dev

  LambdaFunction1Name:
    Type: String
    Default: hlin-lf1-email-dev

  LambdaFunction2Name:
    Type: String
    Default: hlin-lf2-retrain-dev

  SageMakerEndpoint:
    Type: String
    Default: sms-spam-classifier-mxnet-2022-04-13-14-46-36-485

  SESRuleSetName:
    Type: String
    Default: hlin-ses-rule-set-dev

  SESReceiptRuleName:
    Type: String
    Default: hlin-ses-receipt-rule-dev

  EmailDomain:
    Type: String
    Default: highlim.fun

  EmailLambdaRolePolicyName:
    Type: String
    Default: hlin-email-lambda-role-policy-dev

  RetrainLambdaRolePolicyName:
    Type: String
    Default: hlin-retrain-lambda-role-policy-dev

Resources:
  ## Bucket Configs
  EmailBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    DependsOn: PermissionForS3ToInvokeLambda
    Properties:
      BucketName: !Ref EmailBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt EmailLambda.Arn
  
  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: "ses.amazonaws.com"
            Action: 's3:PutObject'
            Resource: !Sub "arn:aws:s3:::${EmailBucketName}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:receipt-rule-set/${SESRuleSetName}:receipt-rule/${SESReceiptRuleName}"
                AWS:SourceAccount: !Ref AWS::AccountId
      Bucket: !Ref EmailBucket
  ## End of Bucket Configs

  ## SES Configs
  SESRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties: 
      RuleSetName: !Ref SESRuleSetName

  SESReceiptRule:
    Type: AWS::SES::ReceiptRule
    DependsOn:
      - EmailBucket
      - SESRuleSet
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref EmailBucketName
        Enabled: true
        Name: !Ref SESReceiptRuleName
        Recipients: 
          - !Ref EmailDomain
      RuleSetName: !Ref SESRuleSetName
  ## End of SES Configs

  ## Email Lambda Function Configs
  PermissionForS3ToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EmailLambda.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${EmailBucketName}"

  EmailLambdaRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref EmailLambdaRolePolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
            Resource: "*"
          - Effect: Allow
            Action: "sagemaker:InvokeEndpoint"
            Resource: "*"
          - Effect: Allow
            Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3-object-lambda:Get*"
              - "s3-object-lambda:List*"
            Resource:
              - !Sub arn:aws:s3:::${EmailBucketName}/*
              - !Sub arn:aws:s3:::${EmailBucketName}
      Roles:
        - !Ref EmailLambdaExecutionRole

  EmailLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  EmailLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: This function is used to process and reply emails
      FunctionName: !Ref LambdaFunction1Name
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt EmailLambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: 30
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:668099181075:layer:AWSLambda-Python37-SciPy1x:115"
      Environment:
        Variables:
          SAGEMAKER_ENDPOINT: !Ref SageMakerEndpoint
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import email
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          import email.utils
          from hashlib import md5
          import json
          import logging
          import numpy as np
          import os
          import urllib.parse


          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)

          REGION = os.environ['AWS_REGION']
          SAGEMAKER_ENDPOINT = os.environ['SAGEMAKER_ENDPOINT']
          vocabulary_length = 9013
          maketrans = str.maketrans


          s3 = boto3.client("s3")
          ses = boto3.client('ses', REGION)
          sagemaker = boto3.client('runtime.sagemaker')


          def one_hot(text, n,
                      filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                      lower=True,
                      split=' '):
              return hashing_trick(text, n,
                                  hash_function='md5',
                                  filters=filters,
                                  lower=lower,
                                  split=split)


          def hashing_trick(text, n,
                            hash_function=None,
                            filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                            lower=True,
                            split=' '):
              if hash_function is None:
                  hash_function = hash
              elif hash_function == 'md5':
                  hash_function = lambda w: int(md5(w.encode()).hexdigest(), 16)

              seq = text_to_word_sequence(text,
                                          filters=filters,
                                          lower=lower,
                                          split=split)
              return [int(hash_function(w) % (n - 1) + 1) for w in seq]
              
              
          def text_to_word_sequence(text,
                                    filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',
                                    lower=True, split=" "):
              if lower:
                  text = text.lower()

              translate_dict = dict((c, split) for c in filters)
              translate_map = maketrans(translate_dict)
              text = text.translate(translate_map)

              seq = text.split(split)
              return [i for i in seq if i]


          def vectorize_sequences(sequences, vocabulary_length):
              results = np.zeros((len(sequences), vocabulary_length))
              for i, sequence in enumerate(sequences):
                results[i, sequence] = 1. 
              return results


          def one_hot_encode(messages, vocabulary_length):
              data = []
              for msg in messages:
                  temp = one_hot(msg, vocabulary_length)
                  data.append(temp)
              return data


          def read_email(event):
              bucket = event['Records'][0]['s3']['bucket']['name']
              filename = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
              logger.debug(f"FILENAME: {filename}")
              fileObj = s3.get_object(Bucket=bucket, Key=filename)
              msg = email.message_from_string(fileObj['Body'].read().decode('utf-8'))
              return msg


          def format_reply(original_email):
              receive_date = original_email['Date']
              subject = original_email['Subject']
              body = original_email.get_payload()[0].get_payload()

              # TODO call sagemaker and get prediction
              logger.debug(f"SAGEMAKER ENDPOINT: {SAGEMAKER_ENDPOINT}")
              one_hot_test_messages = one_hot_encode([body.replace('\n', ''), ], vocabulary_length)
              encoded_test_messages = vectorize_sequences(one_hot_test_messages, vocabulary_length)
              sm_payload = json.dumps(encoded_test_messages.tolist())
              response = sagemaker.invoke_endpoint(EndpointName=SAGEMAKER_ENDPOINT,
                                                  ContentType='application/json',
                                                  Body=sm_payload)
              
              result = json.loads(response['Body'].read().decode('utf-8'))
              logger.debug(f"SAGEMAKER RES: {result}")
              conf = float(result['predicted_probability'][0][0])
              if conf > 0.5:
                  pred = "Spam"
              else:
                  pred = "Ham"
                  conf = 1 - conf

              body_sample = '<br />'.join(body[:240].split('\n'))

              return f"""
                  We received your email sent at {receive_date} with the subject {subject}.<br />
                  <br />
                  Here is a 240 character sample of the email body:<br />
                  {body_sample}
                  <br />
                  The email was categorized as {pred} with a {(conf * 100):.2f}% confidence.
              """


          def create_reply(original_email):
              # Create a new subject line
              subject = f"RE: {original_email['Subject']}"

              # The body text of the email.
              body_text = format_reply(original_email)

              # Create a MIME container.
              msg = MIMEMultipart()
              # Create a MIME text part.
              text_part = MIMEText(body_text, _subtype="html")
              # Attach the text part to the MIME message.
              msg.attach(text_part)

              # Add subject, from and to lines.
              recipient = email.utils.parseaddr(original_email['From'])[1]
              sender = email.utils.parseaddr(original_email['To'])[1]
              msg['Subject'] = subject
              msg['From'] = sender
              msg['To'] = recipient

              return {
                  "Source": sender,
                  "Destinations": recipient,
                  "Data": msg.as_string()
              }


          def send_email(message):
              # Send the email.
              try:
                  #Provide the contents of the email.
                  response = ses.send_raw_email(
                      Source=message['Source'],
                      Destinations=[
                          message['Destinations']
                      ],
                      RawMessage={
                          'Data': message['Data']
                      }
                  )

              # Display an error if something goes wrong.
              except ClientError as e:
                  output = e.response['Error']['Message']
              else:
                  output = f"Email sent with ID: {response['MessageId']}"

              return output


          def lambda_handler(event, context):
              logger.debug(f"EVENT: {event}")
              msg = read_email(event)
              reply = create_reply(msg)
              res = send_email(reply)
              logger.debug(f"SEND EMAIL RES: {res}")
  ## End of Lambda Function Configs

  ## Re-training Lambda Function Configs
  RetrainLambdaRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref RetrainLambdaRolePolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - "sagemaker:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: arn:aws:iam::*:role/*AmazonSageMaker*
            Condition:
              StringEquals:
                iam:PassedToService:
                  - glue.amazonaws.com
                  - robomaker.amazonaws.com
                  - states.amazonaws.com
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: arn:aws:iam::*:role/*
            Condition:
              StringEquals:
                iam:PassedToService: sagemaker.amazonaws.com
      Roles:
        - !Ref RetrainLambdaExecutionRole

  RetrainLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  RetrainLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: This function is used to retrain and deploy the machine learning model if triggered by CloudWatch
      FunctionName: !Ref LambdaFunction2Name
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt RetrainLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 900
      Environment:
        Variables:
          ENDPOINT_NAME: !Ref SageMakerEndpoint
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os


          def lambda_handler(event, context):    
              original_training_job_name = "sms-spam-classifier-mxnet-2022-04-18-15-25-57-981"
              sm = boto3.client('sagemaker')
              job = sm.describe_training_job(TrainingJobName=original_training_job_name)

              training_job_prefix = "sms-spam-classifier-mxnet-"
              training_job_name = training_job_prefix + str(datetime.datetime.today()).replace(' ', '-').replace(':', '-').rsplit('.')[0]
              job['ResourceConfig']['InstanceType'] = "ml.m4.xlarge"
              job['ResourceConfig']['InstanceCount'] = 1

              print("Starting training job %s" % training_job_name)
              
              resp = sm.create_training_job(
                  TrainingJobName=training_job_name, AlgorithmSpecification=job['AlgorithmSpecification'], RoleArn=job['RoleArn'],
                  InputDataConfig=job['InputDataConfig'], OutputDataConfig=job['OutputDataConfig'],
                  ResourceConfig=job['ResourceConfig'], StoppingCondition=job['StoppingCondition'],
                  HyperParameters=job['HyperParameters'] if 'HyperParameters' in job else {},
                  Tags=job['Tags'] if 'Tags' in job else [])

              print(resp)
              
              waiter = sm.get_waiter('training_job_completed_or_stopped')
              waiter.wait(
                  TrainingJobName=training_job_name,
              )
              
              print('Model training complete!')
              model = sm.create_model(
                  ModelName=training_job_name,
                  PrimaryContainer={
                      'ContainerHostname': 'model-Container',
                      'Image': '520713654638.dkr.ecr.us-east-1.amazonaws.com/sagemaker-mxnet:1.2.1-cpu-py3',
                      'ModelDataUrl': f's3://hlin-model/sms-spam-classifier/output/{training_job_name}/output/model.tar.gz',
                      'Environment': {
                          "SAGEMAKER_CONTAINER_LOG_LEVEL": "20",
                          'SAGEMAKER_REGION': os.environ['AWS_REGION'],
                          'SAGEMAKER_PROGRAM': 'spam_classifier.py',
                          'SAGEMAKER_SUBMIT_DIRECTORY': f's3://hlin-model/sms-spam-classifier/code/{original_training_job_name}/source/sourcedir.tar.gz',
                          'MMS_DEFAULT_RESPONSE_TIMEOUT': '500'
                      },
                  },
                  ExecutionRoleArn=job['RoleArn'],
              )
              print('Model creation complete!')
              endpoint_config = sm.create_endpoint_config(
                  EndpointConfigName=training_job_name,
                  ProductionVariants=[
                      {
                          'VariantName': 'AllTraffic',
                          'ModelName': training_job_name,
                          'InitialInstanceCount': 1,
                          'InstanceType': 'ml.m4.xlarge',
                      },
                  ],
              )
              endpoint_name = os.environ['ENDPOINT_NAME']
              sm.update_endpoint(EndpointName=endpoint_name,
                                EndpointConfigName=training_job_name)
              waiter = sm.get_waiter('endpoint_in_service')
              waiter.wait(EndpointName=endpoint_name)
              print('Model deployment complete!')
  ## End of Re-training Lambda Function Configs

  ## Re-training CloudWatch Configs
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(8 minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt RetrainLambda.Arn
          Id: "TargetFunctionLF2"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref RetrainLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRule.Arn
  ## End of Re-training CloudWatch Configs
